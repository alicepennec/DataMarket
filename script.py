import kagglehub
import pandas as pd
import os
from sqlalchemy import create_engine
import pymysql
import random
from datetime import datetime, timedelta

# √âtape 1 : T√©l√©chargement du dataset
path = kagglehub.dataset_download("nikhilchadha1537/decathlon-web-scraped")
print("‚úîÔ∏è Dataset t√©l√©charg√© depuis KaggleHub.")
print("üìÅ Fichiers disponibles :", os.listdir(path))

# √âtape 2 : Chargement du fichier CSV
csv_file_path = os.path.join(path, "Decathlon Apparel Data.csv")
df = pd.read_csv(csv_file_path)

# √âtape 3 : Exploration initiale
print("\nüìä Aper√ßu des donn√©es :")
print(df.head())
print("\n‚ÑπÔ∏è Infos sur le dataset :")
print(df.info())

# √âtape 4 : Nettoyage
# ‚û§ Suppression des colonnes inutiles (si pr√©sentes)
columns_to_drop = [col for col in df.columns if "Unnamed" in col]
df.drop(columns=columns_to_drop, inplace=True)

# ‚û§ Renommage standardis√© (au cas o√π)
df.columns = df.columns.str.strip().str.lower().str.replace(" ", "_")

# ‚û§ Nettoyage des prix (conversion string ‚ûú float)
if 'sale_price' in df.columns:
    df['sale_price'] = df['sale_price'].replace('[‚Çπ,]', '', regex=True).astype(float)

# ‚û§ Nettoyage des notes (rating)
if 'star_rating' in df.columns:
    df['star_rating'] = pd.to_numeric(df['star_rating'], errors='coerce')

# ‚û§ Gestion des valeurs manquantes
missing_values = df.isnull().sum()
print("\nüîç Valeurs manquantes par colonne :")
print(missing_values[missing_values > 0])

# ‚û§ Suppression des doublons
nb_avant = df.shape[0]
df.drop_duplicates(inplace=True)
nb_apres = df.shape[0]
print(f"\nüßπ Doublons supprim√©s : {nb_avant - nb_apres}")

# Cr√©ation des colonnes √† enrichir
df["categorie"] = ""
df["sous_categorie"] = ""
df["pratique"] = ""

# Enrichissement simple par mots-cl√©s
def enrich_row(row):
    title = str(row["product_name"]).lower() 

    # Cat√©gories + sous-cat√©gories
    if "chaussure" in title or "shoes" in title or "boots" in title:
        row["categorie"] = "Chaussures"
        row["sous_categorie"] = "Chaussures de sport"
    elif "t-shirt" in title or "tee shirt" in title or "sweatshirt" in title or "fleece" in title or "top" in title or "sleeve" in title or "base layer" in title or "shirt" in title:
        row["categorie"] = "V√™tements"
        row["sous_categorie"] = "T-shirt"
    elif "veste" in title or "jacket" in title or "cap" in title or "hoodie" in title or "softshell" in title or "gilet" in title or "vest" in title or "poncho" in title:
        row["categorie"] = "V√™tements"
        row["sous_categorie"] = "Veste"
    elif "pantalon" in title or "short" in title or "pants" in title or "tights" in title or "trousers" in title or "leggings" in title or "joggers" in title or "jogging" in title:
        row["categorie"] = "V√™tements"
        row["sous_categorie"] = "Bas"
    elif "gloves" in title or "hat" in title or "boxers" in title or "bra" in title or "backpack" in title or "socks" in title or "scarf" in title or "sunglasses" in title:
        row["categorie"] = "Accessoires"
        row["sous_categorie"] = "Divers"
    else :
        row["categorie"] = "Non d√©termin√©e"
        row["sous_categorie"] = "Non d√©termin√©e"
    # Pratiques sportives
    if "ski" in title or "snowboard" in title:
        row["pratique"] = "Ski"
    elif "randonn√©e" in title or "hiking" in title or "mountain" in title or "trekking" in title or "trek" in title:
        row["pratique"] = "Randonn√©e"
    elif "fitness" in title or "gym" in title:
        row["pratique"] = "Fitness"
    elif "running" in title or "course" in title:
        row["pratique"] = "Course √† pied"
    elif "tennis" in title:
        row["pratique"] = "Sports de raquette"
    elif "cycling" in title:
        row["pratique"] = "Cyclisme"
    elif "horse" in title:
        row["pratique"] = "Equitation"
    else: 
        row["pratique"] = "Autres"

    return row

# Application de l'enrichissement
df = df.apply(enrich_row, axis=1)

# ‚û§ Indexation des donn√©es
df.reset_index(drop=True, inplace=True)
df.insert(0, 'product_id', df.index)

# Export du fichier enrichi
output_path = "./output/decathlon_enriched.csv"
df.to_csv(output_path, index=False)

print(f"‚úÖ Dataset enrichi export√© vers : {output_path}")

## Cr√©ation du dataset Ventes
# G√©n√©ration de donn√©es de vente simul√©es
product_ids = df["product_id"].tolist()                # Tes IDs de produit enrichis
clients = [f"c_{i}" for i in range(1, 201)]            # 200 clients fictifs

ventes_data = []
for _ in range(1000):  # 1000 ventes
    id_prod = random.choice(product_ids)
    client_id = random.choice(clients)
    date = datetime(2021, 1, 1) + timedelta(days=random.randint(0, 730))  # dates entre 2021 et 2023
    ventes_data.append([id_prod, date, client_id])

ventes_df = pd.DataFrame(ventes_data, columns=["id_prod", "date", "client_id"])

# Export du CSV simul√©
ventes_csv_path = "./output/ventes.csv"
ventes_df.to_csv(ventes_csv_path, index=False)
print(f"üì¶ Fichier ventes simul√©es export√© : {ventes_csv_path}")


# Cr√©ation de la base de donn√©e
conn = pymysql.connect(
    host="localhost",
    user="root",
    password="root"
)

with conn.cursor() as cursor:
    cursor.execute("CREATE DATABASE IF NOT EXISTS decathlon_db;")
conn.close()

# Connexion via SQLAlchemy √† la base cr√©√©e
user = "root"
password = "root"
host = "localhost"
port = "3306"
database = "decathlon_db"

db_url = f"mysql+pymysql://{user}:{password}@{host}:{port}/{database}"

engine = create_engine(db_url)

# Lire le csv nettoy√©
products_df = pd.read_csv(output_path)

# Exporter vers MySQL
products_df.to_sql(name="products", con=engine, if_exists="replace", index=False)

print("‚úÖ Table 'products' ins√©r√©e dans la base MySQL avec succ√®s !")

# Lecture du fichier ventes simul√©es
ventes_df = pd.read_csv(ventes_csv_path)

# Export dans MySQL dans la table 'ventes'
ventes_df.to_sql(name="ventes", con=engine, if_exists="replace", index=False)
print("‚úÖ Table 'ventes' ins√©r√©e dans la base MySQL avec succ√®s !")

# Lecture du fichier clients
customers_csv_path = "./input/customers.csv" 
customers_df = pd.read_csv(customers_csv_path)

# Export du CSV simul√©
customers_csv_output_path = "./output/customers.csv"
customers_df.to_csv(customers_csv_output_path, index=False)
print(f"üì¶ Fichier customers export√© : {customers_csv_output_path}")

# V√©rification rapide
print("\nüë§ Aper√ßu des clients :")
print(customers_df.head())

# Insertion dans MySQL
customers_df.to_sql(name="clients", con=engine, if_exists="replace", index=False)
print("‚úÖ Table 'clients' ins√©r√©e dans la base MySQL avec succ√®s !")


