import kagglehub
import pandas as pd
import os
from sqlalchemy import create_engine
import pymysql

# √âtape 1 : T√©l√©chargement du dataset
path = kagglehub.dataset_download("nikhilchadha1537/decathlon-web-scraped")
print("‚úîÔ∏è Dataset t√©l√©charg√© depuis KaggleHub.")
print("üìÅ Fichiers disponibles :", os.listdir(path))

# √âtape 2 : Chargement du fichier CSV
csv_file_path = os.path.join(path, "Decathlon Apparel Data.csv")
df = pd.read_csv(csv_file_path)

# √âtape 3 : Exploration initiale
print("\nüìä Aper√ßu des donn√©es :")
print(df.head())
print("\n‚ÑπÔ∏è Infos sur le dataset :")
print(df.info())

# √âtape 4 : Nettoyage
# ‚û§ Suppression des colonnes inutiles (si pr√©sentes)
columns_to_drop = [col for col in df.columns if "Unnamed" in col]
df.drop(columns=columns_to_drop, inplace=True)

# ‚û§ Renommage standardis√© (au cas o√π)
df.columns = df.columns.str.strip().str.lower().str.replace(" ", "_")

# ‚û§ Nettoyage des prix (conversion string ‚ûú float)
if 'sale_price' in df.columns:
    df['sale_price'] = df['sale_price'].replace('[‚Çπ,]', '', regex=True).astype(float)

# ‚û§ Nettoyage des notes (rating)
if 'star_rating' in df.columns:
    df['star_rating'] = pd.to_numeric(df['star_rating'], errors='coerce')

# ‚û§ Gestion des valeurs manquantes
missing_values = df.isnull().sum()
print("\nüîç Valeurs manquantes par colonne :")
print(missing_values[missing_values > 0])

# ‚û§ Suppression des doublons
nb_avant = df.shape[0]
df.drop_duplicates(inplace=True)
nb_apres = df.shape[0]
print(f"\nüßπ Doublons supprim√©s : {nb_avant - nb_apres}")

# ‚û§ Indexation des donn√©es
df.reset_index(drop=True, inplace=True)
df.insert(0, 'product_id', df.index)

# ‚û§ Export des donn√©es nettoy√©es
output_path = "./output/decathlon_cleaned.csv"
df.to_csv(output_path, index=False)
print(f"\n‚úÖ Donn√©es nettoy√©es export√©es dans : {output_path}")

# Cr√©ation de la base de donn√©e
conn = pymysql.connect(
    host="localhost",
    user="root",
    password="root"
)

with conn.cursor() as cursor:
    cursor.execute("CREATE DATABASE IF NOT EXISTS decathlon_db;")
conn.close()

# Connexion via SQLAlchemy √† la base cr√©√©e
user = "root"
password = "root"
host = "localhost"
port = "3306"
database = "decathlon_db"

db_url = f"mysql+pymysql://{user}:{password}@{host}:{port}/{database}"

engine = create_engine(db_url)

# Lire le csv nettoy√©
df = pd.read_csv(output_path)

# Exporter vers MySQL
df.to_sql(name="products", con=engine, if_exists="replace", index=False)

print("‚úÖ Donn√©es ins√©r√©es dans la base MySQL avec succ√®s !")
